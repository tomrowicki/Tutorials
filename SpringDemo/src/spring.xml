<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

<beans>
<!-- 	abstract means the bean will not get automatically initialized -->
	<bean id="parenttriangle" class="org.tomasz.shapes.Triangle" abstract="true">
<!-- 		<property name="pointA" ref="pointA"/> -->
		<property name="points">
			<list>
				<ref bean="pointA"/>
			</list>
		</property>
	</bean>
<!-- 	init-method and destroy-method can be declared globally for all <beans> through default-init-method etc. -->
	<bean id="triangle1" class="org.tomasz.shapes.Triangle" parent="parenttriangle" init-method="myInit" destroy-method="myCleanup">
		<property name="points">
<!-- 			merging inherits properties from the parent, works for collections -->
			<list merge="true">
				<ref bean="pointB"/>
			</list>
		</property>
	</bean>
<!-- 	<bean id="triangle2" class="org.tomasz.shapes.Triangle" parent="parenttriangle"> -->
<!-- 		<property name="pointB" ref="pointB"/> -->
<!-- 	</bean> -->

	<!-- prototypes get initialized upon referencing/get bean requests; singleton 
		is the default scope, it gets initialized once inside the container -->
	<bean id="triangle" class="org.tomasz.shapes.Triangle" autowire="byName"
		scope="prototype">
		<!-- <property name="type" value="Equilateral" /> -->

		<!-- <constructor-arg value="Equilateral"/> -->
		<!-- <constructor-arg value="20"/> -->

		<!-- <constructor-arg type="int" value="20"/> -->
		<!-- <constructor-arg type="java.lang.String" value="Equilateral"/> -->

		<!-- <constructor-arg index="0" value="Equilateral"/> -->
		<!-- <constructor-arg index="1" value="20"/> -->

		<!-- <property name="pointA"/> -->
		<!-- idref makes sure to refer using id -->
		<!-- <property name="pointA"> -->
		<!-- <ref bean="zeroPoint" /> -->
		<!-- </property> -->
		<!-- <property name="pointB" ref="point2" /> -->
		<!-- <property name="pointC" ref="point3" /> -->
		<!-- <property name="pointB" ref="point2" /> -->
		<!-- <property name="pointC" ref="point3" /> -->
		<!-- <property name="points"> -->
		<!-- <list> -->
		<!-- <ref bean="zeroPoint"/> -->
		<!-- <ref bean="point2"/> -->
		<!-- <ref bean="point3"/> -->
		<!-- </list> -->
		<!-- </property> -->
	</bean>

	<!-- <bean id="zeroPoint" class="org.tomasz.shapes.Point"> -->
	<!-- <property name="x" value="0" /> -->
	<!-- <property name="y" value="0" /> -->
	<!-- </bean> -->

	<!-- <bean id="point2" class="org.tomasz.shapes.Point"> -->
	<!-- <property name="x" value="-20" /> -->
	<!-- <property name="y" value="0" /> -->
	<!-- </bean> -->

	<!-- <bean id="point3" class="org.tomasz.shapes.Point"> -->
	<!-- <property name="x" value="20" /> -->
	<!-- <property name="y" value="0" /> -->
	<!-- </bean> -->
	<!-- for autowiring to work, beans to have the same names as the variables 
		declared in the main bean -->
	<bean id="pointA" class="org.tomasz.shapes.Point">
		<property name="x" value="0" />
		<property name="y" value="0" />
	</bean>

	<bean id="pointB" class="org.tomasz.shapes.Point">
		<property name="x" value="-20" />
		<property name="y" value="0" />
	</bean>

	<bean id="pointC" class="org.tomasz.shapes.Point">
		<property name="x" value="20" />
		<property name="y" value="0" />
	</bean>

	<!-- It's a better idea to use ids for reference, but for some reason one 
		can also employ aliasing -->
	<alias name="triangle" alias="triangle-alias" />
	
<!-- 	this is all it takes to register postprocessor -->
	<bean class="org.tomasz.shapes.DisplayNameBeanPostProcessor"/>
</beans>